{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://json-schema.org/draft-07/schema-3s#",
    "title": "Core schema meta-schema",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#"
            }
        },
        "nonNegativeInteger": {
            "type": "integer",
            "minimum": 0
        },
        "nonNegativeIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": []
        }
    },
    "type": [
        "object",
        "boolean"
    ],
    "properties": {
        "$id": {
            "type": "string",
            "format": "uri-reference"
        },
        "$schema": {
            "type": "string",
            "format": "uri"
        },
        "$ref": {
            "type": "string",
            "format": "uri-reference"
        },
        "$comment": {
            "type": "string"
        },
        "title": {
            "type": "string"
        },
        "description": {
            "type": "string"
        },
        "default": true,
        "readOnly": {
            "type": "boolean",
            "default": false
        },
        "examples": {
            "type": "array",
            "items": true
        },
        "multipleOf": {
            "type": "number",
            "exclusiveMinimum": 0
        },
        "maximum": {
            "type": "number"
        },
        "exclusiveMaximum": {
            "type": "number"
        },
        "minimum": {
            "type": "number"
        },
        "exclusiveMinimum": {
            "type": "number"
        },
        "maxLength": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minLength": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "pattern": {
            "type": "string",
            "format": "regex"
        },
        "additionalItems": {
            "$ref": "#"
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ],
            "default": true
        },
        "maxItems": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minItems": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "uniqueItems": {
            "type": "boolean",
            "default": false
        },
        "contains": {
            "$ref": "#"
        },
        "maxProperties": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minProperties": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "required": {
            "$ref": "#/definitions/stringArray"
        },
        "additionalProperties": {
            "$ref": "#"
        },
        "definitions": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {}
        },
        "properties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {}
        },
        "patternProperties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "propertyNames": {
                "format": "regex"
            },
            "default": {}
        },
        "dependencies": {
            "type": "object",
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#"
                    },
                    {
                        "$ref": "#/definitions/stringArray"
                    }
                ]
            }
        },
        "propertyNames": {
            "$ref": "#"
        },
        "const": true,
        "enum": {
            "type": "array",
            "items": true,
            "minItems": 1,
            "uniqueItems": true
        },
        "type": {
            "anyOf": [
                {
                    "$ref": "#/definitions/simpleTypes"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/simpleTypes"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ]
        },
        "format": {
            "type": "string"
        },
        "contentMediaType": {
            "type": "string"
        },
        "contentEncoding": {
            "type": "string"
        },
        "if": {
            "$ref": "#"
        },
        "then": {
            "$ref": "#"
        },
        "else": {
            "$ref": "#"
        },
        "allOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "not": {
            "$ref": "#"
        },

        "visible": {
            "type": [ "boolean", "string" ],
            "description": "fz-keyword: true: allways visible, false: allways hidden, or string expression for dynamic setting."
        },
        "empty": {
            "description": "fz-keyword: any value to set for empty value (delete field)"
        },
        "transient": {
            "type": "boolean",
            "description": "fz-keyword: if true will set remove this field from final result (internal field)"
        },
        "enumFetch": {
            "type": "string",
            "description": "fz-keyword: name(id) to be provided to user app to collect enum list (see fz-form event 'enum')"
        },
        "requiredIf": {
            "type": "string",
            "description": "fz-keyword: expression to set required keyword dynamically"
        },
        "from": {
            "type": "object",
            "properties": {
                "pointer": {
                    "type": "string",
                    "description": "pointer to an array inside the edited data"
                },
                "id": {
                    "type": "string",
                    "description": "name of the property in pointed array items"
                },
                "extend": {
                    "type": "boolean",
                    "description": " true authorize in place item adding"
                }
            },
            "description": "fz-keyword: data to reference an array representing th enumeration list "
        },
        "filter": {
            "type": "string",
            "description": "fz-keyword: expression for dynamic enum filtering filter (boolean expr)"
        },
        "rank": {
            "type": "string",
            "description": "fz-keyword: expression for dynamic enum ordering (enum is ordered by this values)"
        },
        "abstract": {
            "type": "string",
            "description": "fz-keyword: expression to provide abstract for this field"
        },
        "case": {
            "type": "string",
            "description": "fz-keyword: if expression is true associate the field to this value"
        },
        "readonly": {
            "type": "string",
            "description": "fz-keyword: "
        },
        "collapsed": {
            "enum": ["never", "allways", "true", "false" ],
            "description": "fz-keyword: "
        },
        "expression": {
            "type": "string",
            "description": "fz-keyword: "
        },
        "change": {
            "type": "string",
            "description": "fz-keyword: "
        },
        "pick": {
            "description": "fz-keyword: data provided to picker event to resolve input"
        },
        "preview": {
            "type": "boolean",
            "description": "fz-keyword: true if data preview rendering is to be done false otherwise (true is default)"
        },
        "mimetype": {
            "type": "string",
            "description": "fz-keyword: mitype of the document to collect"
        },
        "mask": {
            "type": "string",
            "description": "fz-keyword: mask pattern for the value to input"
        },
        "precision": {
            "enum": ["ms", "sec", "min"],
            "description": "fz-keyword: precision expected for time value"
        },
        "tab": {
            "type": "string",
            "description": "fz-keyword: tab name. all the field with same tab name are stacked in same tab)"
        },
        "group": {
            "type": "string",
            "description": "fz-keyword: group name. all the field with same group name are stacked in same group box)"
        },
        "inline": {
            "type": "string",
            "description": "fz-keyword: inline name. all the field with same inline name are inlined into same row)"
        }
    },
    "default": true
}